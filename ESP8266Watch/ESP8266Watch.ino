/*
   ESP8266Watch
   - Connection -
   DS1302:
   CLK => GPIO 14 (D5)
   DAT => GPIO 12 (D6)
   RST => GPIO 13 (D7)

   SSD1306 0.96'' OLED:
   SDA => GPIO 4 (D2)
   SCL => GPIO 5 (D1)

   Potentiometer:
   Connect the two ends to VCC and GND, and the pin in the middle to ADC0 (A0).

   Touch button:
   SIG => GPIO 15 (D8)
*/

// Include necessary libraries.
#include <DS1302.h>
#include <U8g2lib.h>
#include <Wire.h>

// You can change the pins here.
// The porentiometer pin:
#define POTPIN A0
// The button pin:
#define BTNPIN 15
// DS1302 CLK, DAT and RST pins:
#define CLK 14
#define DAT 12
#define RST 13

// Create device objects.
DS1302 rtc(RST, DAT, CLK);
U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// QR code image
const unsigned char qrcode[] U8X8_PROGMEM = {
  0xF0, 0x1D, 0xFF, 0xFD, 0xFF, 0xBF, 0xC0, 0x70, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0xFD, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x1D, 0xD1, 0xCD, 0xE3, 0xFE, 0xC0, 0x70,
  0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0x8C, 0x6F, 0xE6, 0x77, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFC, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xF0, 0xF0, 0x3C, 0x8E, 0x7F, 0xBF, 0xFF, 0xC0, 0x70,
  0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xF7, 0xFF, 0xF0,
  0xF9, 0x04, 0x3F, 0xFF, 0xFF, 0xEE, 0xFB, 0x90, 0xEE, 0xFB, 0xF8, 0xFF, 0xBF, 0xFF, 0x8E, 0x70,
  0xFF, 0xFF, 0xEF, 0x9F, 0xCB, 0xFF, 0xFF, 0xF0, 0xFF, 0xCF, 0xFF, 0x7F, 0xBF, 0xFF, 0xF7, 0xF0,
  0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xF0, 0xFE, 0xFF, 0x6F, 0xFF, 0xFE, 0xF8, 0xFF, 0xF0,
  0xFE, 0xFF, 0xFF, 0xFF, 0xF7, 0xF7, 0xFF, 0xF0, 0xF3, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0x70,
  0xFB, 0xFB, 0xEC, 0xFC, 0x1F, 0xDE, 0xC7, 0xF0, 0xFF, 0xFF, 0xFF, 0xBD, 0x9F, 0xFF, 0xDF, 0xF0,
  0xDF, 0x7F, 0xFF, 0xFF, 0xF3, 0xF1, 0xFF, 0xF0, 0xDB, 0xFB, 0xFD, 0xFF, 0xF3, 0x86, 0x73, 0xF0,
  0xFB, 0xFD, 0xFF, 0xFF, 0xFF, 0xFB, 0xFB, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDE, 0x70,
  0xF7, 0xDF, 0xC7, 0x6F, 0x9F, 0xDF, 0xEE, 0x70, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xF0,
  0xFF, 0xFF, 0x3F, 0xDF, 0xFF, 0xF7, 0xFF, 0xF0, 0xF7, 0x1E, 0x3F, 0x7F, 0x9F, 0xCF, 0xFF, 0xF0,
  0xFD, 0xFF, 0xC7, 0x7F, 0x9F, 0xFE, 0xDF, 0xF0, 0xFF, 0xFB, 0xFF, 0xFF, 0xFE, 0xFF, 0xEF, 0xD0,
  0xFF, 0xF9, 0xFB, 0xCC, 0xFF, 0xFF, 0xFD, 0xD0, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xF3, 0xF0,
  0xFF, 0xEE, 0x6F, 0xFF, 0xB7, 0xE1, 0xDF, 0x70, 0xDD, 0x7F, 0xEF, 0xFF, 0xE2, 0xFB, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xEF, 0xFF, 0xF0, 0xF7, 0xF1, 0x78, 0x77, 0x7F, 0xFE, 0xE3, 0x70,
  0xFB, 0xF9, 0xFB, 0xFF, 0xFF, 0xFF, 0xF9, 0xF0, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0xDF, 0x8F, 0xED, 0xEF, 0x3E, 0x0F, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE, 0x7F, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFF, 0xF0, 0xDB, 0xCF, 0xC7, 0xBF, 0x1F, 0xCB, 0xD1, 0xF0,
  0xFF, 0xFF, 0xE7, 0xFF, 0x5F, 0xF7, 0xFF, 0xF0, 0xF6, 0x3F, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0x80, 0x03, 0x3B, 0xE9, 0xFC, 0xDE, 0x1D, 0xF0, 0xFF, 0xFF, 0xFD, 0xFF, 0xBF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x3F, 0xDF, 0x69, 0xE7, 0xCE, 0x19, 0xF0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFC, 0x7F, 0xFF, 0xBF, 0xFB, 0xFB, 0xF0, 0xFF, 0xFF, 0xD1, 0xE8, 0xFF, 0x9F, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xEE, 0xDF, 0xF0, 0xF7, 0x9F, 0x7F, 0xEF, 0x3E, 0xFF, 0xDB, 0xF0,
  0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xDF, 0x3F, 0xF7, 0xFF, 0xFF, 0xF0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x80, 0x06, 0x30, 0xC8, 0x08, 0x20, 0x10, 0x10
};

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial.println("Configuring RTC module...");
  Serial.println();
  rtc.writeProtect(false);
  rtc.halt(false);
  // Uncomment the two lines below to set the clock.
  //Time t(2021, 7, 22, 21, 57, 50, Time::kThursday);
  //rtc.time(t);

  Serial.println("RTC configuration completed. Configuring screen...");
  u8g2.begin();
  //  u8g2.enableUTF8Print();
  //  u8g2.setFont(u8g2_font_ncenB10_tr);
  Serial.println("Screen configuration completed. Moving to the loop...");
}

void loop() {
  // put your main code here, to run repeatedly:
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_ncenB12_tr);
    u8g2.drawStr(0, 14, "RTC Test");
//    printTime();
    printBitmap();
  } while (u8g2.nextPage());
}

void printTime() {
  Time t = rtc.time();
  char bufDate[10];
  char bufTime[9];
  snprintf(bufDate, sizeof(bufDate), "%04d/%02d/%02d", t.yr, t.mon, t.date);
  snprintf(bufTime, sizeof(bufTime), "%02d:%02d:%02d", t.hr, t.min, t.sec);
  String analogStr = "Analog:";
  analogStr += String(analogRead(A0));
  u8g2.drawStr(0, 28, bufDate);
  u8g2.drawStr(0, 42, bufTime);
  u8g2.drawStr(0, 56, analogStr.c_str());
}

void printBitmap() {
  u8g2.drawXBM(0, 0, 60, 60, qrcode);
}
